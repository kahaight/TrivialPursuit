@using TrivialPursuit.Models.Game
@model Game
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Game</title>
</head>
<body>

        @*@if (TempData.ContainsKey("Test"))
        {
            <div class="alert alert-success fade in" role="alert">
                <button type="button" class="close" data-dismiss="alert">
                    <span>&times;</span>
                </button>
                @TempData["Test"]
            </div>
        }*@
   

    @*We are getting the random question client side, so lets evaluate it client side
        Client Side we need to:
        - allow the user to submit the information that the controller needs
        - check the submitted answer is contained within the list of answers connected to the question, return bool for isCorrect?
        - send the bool as well as category or category color back to the controller 

        Our Server Side needs:
        Right or Wrong
        Question.Category.Color

        Server side we need to:
        increment the counts of questions answered and questions answered correctly
        return to the view with the correct answer (and whether or not they got it correct), 

        View needs to:
        use if statement to present information on previous question (if they got it correct and what the correctly spelled correct anser is)
        pull new random question and start the process over again



        *@


    <div>
        @{
            var question = Model.GetRandomQuestion();
        }
        @question.Text <br/>
        @foreach(var answer in question.Answers)
        {
            @answer.Text
        };
    </div>
    
    <div>
        <div class="form-group">
            @Html.LabelFor(model => model.PlayerAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlayerAnswer, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit Answer" class="btn btn-default" />
            </div>
        </div>
    </div>
</body>
</html>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}